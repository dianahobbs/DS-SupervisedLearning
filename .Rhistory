scale_fill_manual(values = c("#D2A6B4","#771434"))+
scale_x_discrete(labels = c("CDR = 0", "CDR > 0")) +
labs (y="zRT Congruency Effect No Switch Trials", x = "") +
ylim(-2,1.5)+
theme_apa() +theme(panel.border = element_blank(), axis.line.x = element_line(), axis.line.y = element_line(),
axis.text = element_text(size = 10), axis.title.y = element_text(size=12),
axis.title.x = element_text(size=12), legend.position = "NONE", legend.text = element_text(size=8))
C <- zRT %>%
ggplot(., aes (x=CDRx, y=Switch_Effect, group=CDRx))+
geom_violin(trim = TRUE, alpha = .7 , aes(fill = CDRx), size = 1)+
geom_point(aes(y=Switch_Effect),position = position_jitter(width = .2),size =1, alpha = 0.5,  show.legend = F)+
geom_boxplot(width = .15, outlier.size = 1.5, alpha = 0.5, show.legend = F)+
stat_summary(fun = mean, geom = "point", size = 2, colour = "darkgreen",alpha = 0.5) +
scale_color_manual(values = c("#D2A6B4","#771434"))+
scale_fill_manual(values = c("#D2A6B4","#771434"))+
scale_x_discrete(labels = c("CDR = 0", "CDR > 0")) +
labs (y="zRT Congruency Effect Switch Trials", x = "") +
ylim(-2,1.5)+
theme_apa() +theme(panel.border = element_blank(), axis.line.x = element_line(), axis.line.y = element_line(),
axis.text = element_text(size = 10), axis.title.y = element_text(size=12),
axis.title.x = element_text(size=12), legend.position = "NONE", legend.text = element_text(size=8))
plot_grid(A,B,C,a,nrow =1,ncol=4, rel_widths = c (1,1,1,0.2), labels = c("","","",""))
#ggsave("z_RT.png")
#Errors
A <- Errors %>%
ggplot(., aes (x=CDRx, y=Pure_Effect, group=CDRx))+
geom_violin(trim = TRUE, alpha = .7 , aes(fill = CDRx), size = 1)+
geom_point(aes(y=Pure_Effect),position = position_jitter(width = .2),size =1, alpha = 0.5,  show.legend = F)+
geom_boxplot(width = .15, outlier.size = 1.5, alpha = 0.5, show.legend = F)+
stat_summary(fun = mean, geom = "point", size = 2, colour = "darkgreen",alpha = 0.5) +
scale_color_manual(values = c("#D2A6B4","#771434"))+
scale_fill_manual(values = c("#D2A6B4","#771434"))+
scale_x_discrete(labels = c("CDR = 0", "CDR > 0")) +
labs (y="% Errors Congruency Effect Pure Trials", x = "") +
ylim(-50,50)+
theme_apa() +theme(panel.border = element_blank(), axis.line.x = element_line(), axis.line.y = element_line(),
axis.text = element_text(size = 10), axis.title.y = element_text(size=12),
axis.title.x = element_text(size=12), legend.position = "NONE", legend.text = element_text(size=8))
B <- Errors %>%
ggplot(., aes (x=CDRx, y=NoSwitch_Effect, group=CDRx))+
geom_violin(trim = TRUE, alpha = .7 , aes(fill = CDRx), size = 1)+
geom_point(aes(y=NoSwitch_Effect),position = position_jitter(width = .2),size =1, alpha = 0.5,  show.legend = F)+
geom_boxplot(width = .15, outlier.size = 1.5, alpha = 0.5, show.legend = F)+
stat_summary(fun = mean, geom = "point", size = 2, colour = "darkgreen",alpha = 0.5) +
scale_color_manual(values = c("#D2A6B4","#771434"))+
scale_fill_manual(values = c("#D2A6B4","#771434"))+
scale_x_discrete(labels = c("CDR = 0", "CDR > 0")) +
labs (y="% Errors Congruency Effect No Switch Trials", x = "") +
ylim(-50,50)+
theme_apa() +theme(panel.border = element_blank(), axis.line.x = element_line(), axis.line.y = element_line(),
axis.text = element_text(size = 10), axis.title.y = element_text(size=12),
axis.title.x = element_text(size=12), legend.position = "NONE", legend.text = element_text(size=8))
C <- Errors %>%
ggplot(., aes (x=CDRx, y=Switch_Effect, group=CDRx))+
geom_violin(trim = TRUE, alpha = .7 , aes(fill = CDRx), size = 1)+
geom_point(aes(y=Switch_Effect),position = position_jitter(width = .2),size =1, alpha = 0.5,  show.legend = F)+
geom_boxplot(width = .15, outlier.size = 1.5, alpha = 0.5, show.legend = F)+
stat_summary(fun = mean, geom = "point", size = 2, colour = "darkgreen",alpha = 0.5) +
scale_color_manual(values = c("#D2A6B4","#771434"))+
scale_fill_manual(values = c("#D2A6B4","#771434"))+
scale_x_discrete(labels = c("CDR = 0", "CDR > 0")) +
labs (y="% Errors Congruency Effect Switch Trials", x = "") +
ylim(-50,50)+
theme_apa() +theme(panel.border = element_blank(), axis.line.x = element_line(), axis.line.y = element_line(),
axis.text = element_text(size = 10), axis.title.y = element_text(size=12),
axis.title.x = element_text(size=12), legend.position = "NONE", legend.text = element_text(size=8))
plot_grid(A,B,C,a,nrow =1,ncol=4, rel_widths = c (1,1,1,0.2), labels = c("","","",""))
ggsave("Errors.png")
rm(A,B,C,D,E,a)
#### Create TBSS Data Files ####
means <- zRT %>%
select(Subject,ID,Local,Global,Local_Effect,Global_Effect)
#### Create TBSS Data Files ####
means <- zRT %>%
select(Subject,Local,Global,Local_Effect,Global_Effect)
View(means)
#### Create TBSS Data Files ####
means <- zRT %>%
select(Subject,Local,Global,Local_Effect,Global_Effect)%>%
arrange(Subject)
#### Create TBSS Data Files ####
means <- zRT %>%
select(Subject,Age,Local,Global,Local_Effect,Global_Effect)%>%
arrange(Subject)
#### Create TBSS Data Files ####
means <- zRT %>%
select(Subject,Age,Local,Global,Local_Effect,Global_Effect)%>%
mutate(Group = "1")%>%
arrange(Subject)
#### Create TBSS Data Files ####
means <- zRT %>%
select(Subject,Age,Local,Global,Local_Effect,Global_Effect)%>%
mutate(Group = "1")%>%
arrange(Subject)%>%
write.csv("TBSS_Means.csv")
slope <- means %>%
mutate(Group = [1, 2, 1])
#Read in a vector of groups from the TBSS analysis
Groups <- read.csv("groups.csv")
View(Groups)
#Read in a vector of groups from the TBSS analysis
Groups <- read.csv("groups.csv")
means$Gp1 <- Groups$Gp1
means$Gp2 <- Groups$Gp2
colnames(means)
#Read in a vector of groups from the TBSS analysis
Groups <- read.csv("groups.csv")
#### Create TBSS Data Files ####
means <- zRT %>%
select(Subject,Age,Local,Global,Local_Effect,Global_Effect)%>%
mutate(Group = "1")%>%
arrange(Subject)%>%
write.csv("TBSS_Means.csv")
#Read in a vector of groups from the TBSS analysis
Groups <- read.csv("groups.csv")
means$Gp1 <- Groups$Gp1
#### Create TBSS Data Files ####
means <- zRT %>%
select(Subject,Age,Local,Global,Local_Effect,Global_Effect)%>%
mutate(Group = "1")%>%
arrange(Subject)
write.csv(means,"TBSS_Means.csv")
colnames(means)
#Read in a vector of groups from the TBSS analysis
Groups <- read.csv("groups.csv")
means$Gp1 <- Groups$Gp1
slope <- means %>%
mutate(Gp1 = Groups$Gp1)
#### Create TBSS Data Files ####
means <- zRT %>%
select(Subject,Age,Local,Global,Local_Effect,Global_Effect)%>%
mutate(Group = "1")%>%
arrange(Subject)
write.csv(means,"TBSS_Means.csv")
#Read in a vector of groups from the TBSS analysis
Groups <- read.csv("groups.csv")
slope <- means %>%
mutate(Gp1 = Groups$Gp1)
colnames(means)
slope <- means %>%
mutate(Gp1 = Groups$Gp1)%>%
mutate(Gp2 = Groups$Gp2)%>%
mutate(Local1 = case_when(
Gp1 = "1" ~ Local,
Gp1 = "0" ~ "0"
))
slope <- means %>%
mutate(Gp1 = Groups$Gp1)%>%
mutate(Gp2 = Groups$Gp2)%>%
mutate(Local1 = case_when(
Gp1 = "1" ~ Local,
Gp1 = "0" ~ 0
))
slope <- means %>%
mutate(Gp1 = Groups$Gp1)%>%
mutate(Gp2 = Groups$Gp2)%>%
mutate(Local1 = case_when(
Gp1 = "1" ~ Local,
Gp1 = "0" ~ "0"
))
slope <- means %>%
mutate(Gp1 = Groups$Gp1)%>%
mutate(Gp2 = Groups$Gp2)%>%
mutate(Local1 = case_when(
Gp1 = "1" ~ Local,
Gp1 = "0" ~ Gp1,
))
slope <- means %>%
mutate(Gp1 = Groups$Gp1)%>%
mutate(Gp2 = Groups$Gp2)%>%
mutate(Local1 = case_when(
Gp1 = "1" ~ Local,
Gp1 = "0" ~ Gp1
))
slope <- means %>%
mutate(Gp1 = Groups$Gp1)%>%
mutate(Gp2 = Groups$Gp2)%>%
mutate(Local1 = case_when(
Gp1 == "1" ~ Local,
Gp1 == "0" ~ 0
))
View(slope)
slope <- means %>%
mutate(Gp1 = Groups$Gp1)%>%
mutate(Gp2 = Groups$Gp2)%>%
mutate(Local1 = case_when(
Gp1 == "1" ~ Local,
Gp1 == "0" ~ 0))%>%
mutate(Local2 = case_when(
Gp2 == "1" ~ Local,
Gp2 == "0" ~ 0))%>%
mutate(Global1 = case_when(
Gp1 == "1" ~ Global,
Gp1 == "0" ~ 0))%>%
mutate(Global2 = case_when(
Gp2 == "1" ~ Global,
Gp2 == "0" ~ 0))%>%
mutate(Local_Eff1 = case_when(
Gp1 == "1" ~ Local_Effect,
Gp1 == "0" ~ 0))%>%
mutate(Local_Eff2 = case_when(
Gp2 == "1" ~ Local_Effect,
Gp2 == "0" ~ 0))%>%
mutate(Global_Eff1 = case_when(
Gp1 == "1" ~ Global_Effect,
Gp1 == "0" ~ 0))%>%
mutate(Global_Eff2 = case_when(
Gp2 == "1" ~ Global_Effect,
Gp2 == "0" ~ 0))%>%
Local, Global, Local_Effect, Global_Effect
Gp1 == "1" ~ Global_Effect,
Gp1 == "0" ~ 0))%>%
mutate(Global_Eff2 = case_when(
slope <- means %>%
mutate(Gp1 = Groups$Gp1)%>%
mutate(Gp2 = Groups$Gp2)%>%
mutate(Local1 = case_when(
Gp1 == "1" ~ Local,
Gp1 == "0" ~ 0))%>%
mutate(Local2 = case_when(
Gp2 == "1" ~ Local,
Gp2 == "0" ~ 0))%>%
mutate(Global1 = case_when(
Gp1 == "1" ~ Global,
Gp1 == "0" ~ 0))%>%
mutate(Global2 = case_when(
Gp2 == "1" ~ Global,
Gp2 == "0" ~ 0))%>%
mutate(Local_Eff1 = case_when(
Gp1 == "1" ~ Local_Effect,
Gp1 == "0" ~ 0))%>%
mutate(Local_Eff2 = case_when(
Gp2 == "1" ~ Local_Effect,
Gp2 == "0" ~ 0))%>%
mutate(Global_Eff1 = case_when(
Gp1 == "1" ~ Global_Effect,
Gp1 == "0" ~ 0))%>%
mutate(Global_Eff2 = case_when(
Gp2 == "1" ~ Global_Effect,
Gp2 == "0" ~ 0))
dsssjdjdsahdf
slope <- means %>%
mutate(Gp1 = Groups$Gp1)%>%
mutate(Gp2 = Groups$Gp2)%>%
mutate(Local1 = case_when(
Gp1 == "1" ~ Local,
Gp1 == "0" ~ 0
))%>%
mutate(Local2 = case_when(
Gp2 == "1" ~ Local,
Gp2 == "0" ~ 0
))%>%
mutate(Global1 = case_when(
Gp1 == "1" ~ Global,
Gp1 == "0" ~ 0
))%>%
mutate(Global2 = case_when(
Gp2 == "1" ~ Global,
Gp2 == "0" ~ 0
))%>%
mutate(Local_Eff1 = case_when(
Gp1 == "1" ~ Local_Effect,
Gp1 == "0" ~ 0
))%>%
mutate(Local_Eff2 = case_when(
Gp2 == "1" ~ Local_Effect,
Gp2 == "0" ~ 0
))%>%
mutate(Global_Eff1 = case_when(
Gp1 == "1" ~ Global_Effect,
Gp1 == "0" ~ 0
))%>%
mutate(Global_Eff2 = case_when(
Gp2 == "1" ~ Global_Effect,
Gp2 == "0" ~ 0
))
View(slope)
# Remember to go in and make a "zero" participant in row 37 in excel (someone was dropped by the analysis)
write.csv(slope,"TBSS_values.csv")
#### Set Up ####
# Load packages and source the violin plot function
pacman::p_load(tidyverse,data.table,survival,psych,jtools,cowplot,unikn,schoolmath,BayesFactor)
#### Set Up ####
# Load packages and source the violin plot function
pacman::p_load(tidyverse,data.table,survival,psych,jtools,cowplot,unikn,schoolmath,BayesFactor)
#### Set Up ####
# Load packages and source the violin plot function
pacman::p_load(tidyverse,data.table,survival,psych,jtools,cowplot,unikn,schoolmath,BayesFactor)
#### Set Up ####
# Load packages and source the violin plot function
pacman::p_load(tidyverse,data.table,survival,psych,jtools,cowplot,unikn,schoolmath,BayesFactor)
source("https://gist.githubusercontent.com/benmarwick/2a1bb0133ff568cbe28d/raw/fb53bd97121f7f9ce947837ef1a4c65a73bffb3f/geom_flat_violin.R")
#### Set Up ####
# Load packages and source the violin plot function
pacman::p_load(tidyverse,data.table,survival,psych,jtools,cowplot,unikn,schoolmath,BayesFactor)
source("https://gist.githubusercontent.com/benmarwick/2a1bb0133ff568cbe28d/raw/fb53bd97121f7f9ce947837ef1a4c65a73bffb3f/geom_flat_violin.R")
# Find .txt file names for eprime files
file_names <- dir(pattern = "*.txt")
#### Import and Filter Data ####
# Import all eprime data into one giant data structure (all people, all sessions)
eprime_raw <- data.frame (rbindlist (lapply(file_names, fread, sep = '\t', header = T, fill = TRUE),fill = TRUE))
# Import MapIDs and MRI dates for participants of interest, also reformat dates to correct format for later
mapIDs <- read.csv("MRI_mapID.csv",header = TRUE)%>%
mutate(mriDate = as.Date(Date, "%m/%d/%Y"))
a<-lm(hippocampus ~ AGE + SEX + EDUC + RACE + CDR + APOE4 + CVD_Risk, data=mriT3)
print(summary(a))
#### Set Up ####
# Load packages
pacman::p_load(tidyverse,jtools,naniar,lubridate,lme4,sfsmisc,foreign,MASS,scales,ggseg,cowplot)
###### Load data & setup variables as necessary
mriT3 <- read.csv("./Data/mriT3_Norm.csv")%>%
mutate(CVD_Risk = str_replace_all(CVD_Risk, c("<5%"="0", "5-10%"="1", "10-20%"="2","20-30%"="3",">=30%"="4")))
###### Set Up ######
# Load packages
pacman::p_load(tidyverse,jtools,naniar,lubridate,janitor,zoo)
###### Load data and Merge ######
source("OASIS_Setup.R")
source("ADNI_Setup.R")
# Organize the data
OASIS_data <- OASIS_data%>%
rename(days_since_mri=Label)%>%
mutate(Study = case_when(SEX=="Male" | SEX=="Female" ~ "OASIS"))%>%
group_by(RID)%>%
distinct(AGE, .keep_all = T)%>%
arrange(AGE)%>%
mutate(Visit = case_when(
(row_number()==1) ~ 1,
(row_number()==2) ~ 2,
(row_number()==3) ~ 3,
(row_number()==4) ~ 4,
(row_number()==5) ~ 5,
(row_number()==6) ~ 6))%>%
ungroup()%>%
dplyr::select(RID,Study,AGE,SEX,EDUC,RACE,BMI,APOE4,tothipp,percenthipp,ICV,thick,centiloid,AmyPositivity,CDR,MMSE,days_since_mri,yrs_since_mri,Visit)
ADNI_data <- ADNI_data%>%
mutate(Study = case_when(SEX=="Male" | SEX=="Female" ~ "ADNI"))%>%
group_by(RID)%>%
distinct(CDR_Date, .keep_all = T)%>%
arrange(yrs_since_mri)%>%
mutate(Visit = case_when(
(row_number()==1) ~ 1,
(row_number()==2) ~ 2,
(row_number()==3) ~ 3,
(row_number()==4) ~ 4,
(row_number()==5) ~ 5,
(row_number()==6) ~ 6,
(row_number()==7) ~ 7,
(row_number()==8) ~ 8,
(row_number()==9) ~ 9,
(row_number()==10) ~ 10,
(row_number()==11) ~ 11))%>%
ungroup()%>%
dplyr::select(RID,Study,AGE,SEX,EDUC,RACE,BMI,APOE4,tothipp,percenthipp,ICV,thick,centiloid,AmyPositivity,CDR,MMSE,days_since_mri,yrs_since_mri,Visit)
data <- rbind(OASIS_data,ADNI_data)
rm(ADNI_data,OASIS_data)
# Figure out who has baseline CDR=0, MMSE>=27
data_Base <- data%>%
filter(Visit==1 & CDR==0 & MMSE>=27)%>%
filter(yrs_since_mri<=3)
data_Base_IDs <- as.data.frame(table(data_Base$RID))
setwd("~/Documents/GitHub/DS-SupervisedLearning")
###### Set Up ######
# Load packages
pacman::p_load(tidyverse,jtools,naniar,lubridate,janitor,zoo)
###### Load data and Merge ######
source("OASIS_Setup.R")
source("ADNI_Setup.R")
# Organize the data
OASIS_data <- OASIS_data%>%
rename(days_since_mri=Label)%>%
mutate(Study = case_when(SEX=="Male" | SEX=="Female" ~ "OASIS"))%>%
group_by(RID)%>%
distinct(AGE, .keep_all = T)%>%
arrange(AGE)%>%
mutate(Visit = case_when(
(row_number()==1) ~ 1,
(row_number()==2) ~ 2,
(row_number()==3) ~ 3,
(row_number()==4) ~ 4,
(row_number()==5) ~ 5,
(row_number()==6) ~ 6))%>%
ungroup()%>%
dplyr::select(RID,Study,AGE,SEX,EDUC,RACE,BMI,APOE4,tothipp,percenthipp,ICV,thick,centiloid,AmyPositivity,CDR,MMSE,days_since_mri,yrs_since_mri,Visit)
ADNI_data <- ADNI_data%>%
mutate(Study = case_when(SEX=="Male" | SEX=="Female" ~ "ADNI"))%>%
group_by(RID)%>%
distinct(CDR_Date, .keep_all = T)%>%
arrange(yrs_since_mri)%>%
mutate(Visit = case_when(
(row_number()==1) ~ 1,
(row_number()==2) ~ 2,
(row_number()==3) ~ 3,
(row_number()==4) ~ 4,
(row_number()==5) ~ 5,
(row_number()==6) ~ 6,
(row_number()==7) ~ 7,
(row_number()==8) ~ 8,
(row_number()==9) ~ 9,
(row_number()==10) ~ 10,
(row_number()==11) ~ 11))%>%
ungroup()%>%
dplyr::select(RID,Study,AGE,SEX,EDUC,RACE,BMI,APOE4,tothipp,percenthipp,ICV,thick,centiloid,AmyPositivity,CDR,MMSE,days_since_mri,yrs_since_mri,Visit)
data <- rbind(OASIS_data,ADNI_data)
rm(ADNI_data,OASIS_data)
# Figure out who has baseline CDR=0, MMSE>=27
data_Base <- data%>%
filter(Visit==1 & CDR==0 & MMSE>=27)%>%
filter(yrs_since_mri<=3)
data_Base_IDs <- as.data.frame(table(data_Base$RID))
# Only keep IDs that are included in the above list
data_KEEP <- data[(data$RID %in% data_Base_IDs$Var1),]
data_CDR <- data_KEEP%>%
dplyr::select(RID,CDR,MMSE,yrs_since_mri,Visit)
# Convert to wide format
data_CDR_Wide <- data_CDR%>%
#dplyr::select(-c(45,46))%>%
pivot_wider(id_cols = 1,
names_from = Visit,
names_prefix = "",
values_from = 2:4)%>%
drop_na(CDR_2)
# Merge wide CDR data with data_KEEP
data_Wide <- merge(data_Base,data_CDR_Wide,by="RID")%>%dplyr::select(-c(15:19))
rm(data,data_Base,data_Base_IDs,data_CDR,data_CDR_Wide,data_KEEP)
###### Converters vs Non-converters######
# Determine who is a converter vs non-converter (Go back to the variables we used with MCI conversion setup)
data<-data_Wide
data$CDR_1[is.na(data$CDR_1)] <- "NA"
data$CDR_2[is.na(data$CDR_2)] <- "NA"
data$CDR_3[is.na(data$CDR_3)] <- "NA"
data$CDR_4[is.na(data$CDR_4)] <- "NA"
data$CDR_5[is.na(data$CDR_5)] <- "NA"
data$CDR_6[is.na(data$CDR_6)] <- "NA"
data$CDR_7[is.na(data$CDR_7)] <- "NA"
data$CDR_8[is.na(data$CDR_8)] <- "NA"
data$CDR_9[is.na(data$CDR_9)] <- "NA"
data$CDR_10[is.na(data$CDR_10)] <- "NA"
data$CDR_11[is.na(data$CDR_11)] <- "NA"
# Cognitive (CDR) Converter: 1: converter, 0: didn't convert
data<-data%>%
mutate(Cog_Convert = case_when(
CDR_1==0 & CDR_2==0 & CDR_3==0 & CDR_4==0 & CDR_5==0 & CDR_6==0 & CDR_7==0 & CDR_8==0 & CDR_9==0 & CDR_10==0 & CDR_11==0 ~ "0", # if CDR at all 11 time-points is 0, then non-converter
CDR_1==0 & CDR_2==0 & CDR_3==0 & CDR_4==0 & CDR_5==0 & CDR_6==0 & CDR_7==0 & CDR_8==0 & CDR_9==0 & CDR_10==0 & CDR_11=="NA" ~ "0", # "" 10 time-points ""
CDR_1==0 & CDR_2==0 & CDR_3==0 & CDR_4==0 & CDR_5==0 & CDR_6==0 & CDR_7==0 & CDR_8==0 & CDR_9==0 & CDR_10=="NA" & CDR_11=="NA" ~ "0", # "" etc ""
CDR_1==0 & CDR_2==0 & CDR_3==0 & CDR_4==0 & CDR_5==0 & CDR_6==0 & CDR_7==0 & CDR_8==0 & CDR_9=="NA" & CDR_10=="NA" & CDR_11=="NA" ~ "0",
CDR_1==0 & CDR_2==0 & CDR_3==0 & CDR_4==0 & CDR_5==0 & CDR_6==0 & CDR_7==0 & CDR_8=="NA" & CDR_9=="NA" & CDR_10=="NA" & CDR_11=="NA" ~ "0",
CDR_1==0 & CDR_2==0 & CDR_3==0 & CDR_4==0 & CDR_5==0 & CDR_6==0 & CDR_7=="NA" & CDR_8=="NA" & CDR_9=="NA" & CDR_10=="NA" & CDR_11=="NA" ~ "0",
CDR_1==0 & CDR_2==0 & CDR_3==0 & CDR_4==0 & CDR_5==0 & CDR_6=="NA" & CDR_7=="NA" & CDR_8=="NA" & CDR_9=="NA" & CDR_10=="NA" & CDR_11=="NA" ~ "0",
CDR_1==0 & CDR_2==0 & CDR_3==0 & CDR_4==0 & CDR_5=="NA" & CDR_6=="NA" & CDR_7=="NA" & CDR_8=="NA" & CDR_9=="NA" & CDR_10=="NA" & CDR_11=="NA" ~ "0",
CDR_1==0 & CDR_2==0 & CDR_3==0 & CDR_4=="NA" & CDR_5=="NA" & CDR_6=="NA" & CDR_7=="NA" & CDR_8=="NA" & CDR_9=="NA" & CDR_10=="NA" & CDR_11=="NA" ~ "0",
CDR_1==0 & CDR_2==0 & CDR_3=="NA" & CDR_4=="NA" & CDR_5=="NA" & CDR_6=="NA" & CDR_7=="NA" & CDR_8=="NA" & CDR_9=="NA" & CDR_10=="NA" & CDR_11=="NA" ~ "0",
CDR_1==0 & CDR_2=="NA" & CDR_3=="NA" & CDR_4=="NA" & CDR_5=="NA" & CDR_6=="NA" & CDR_7=="NA" & CDR_8=="NA" & CDR_9=="NA" & CDR_10=="NA" & CDR_11=="NA" ~ "0",
CDR_1>=0.5 | CDR_2>=0.5 | CDR_3>=0.5 | CDR_4>=0.5 | CDR_5>=0.5 | CDR_6>=0.5 | CDR_7>=0.5 | CDR_8>=0.5 | CDR_9>=0.5 | CDR_10>=0.5 | CDR_11>=0.5 ~ "1"))%>%# if CDR >= 0.5 at ANY time-point, then converter
# 'followuptime' variable: non-coverters = total years of follow-up after base; converters = time to conversion
mutate(followuptime = case_when(
CDR_1==0 & CDR_2==0 & CDR_3==0 & CDR_4==0 & CDR_5==0 & CDR_6==0 & CDR_7==0 & CDR_8==0 & CDR_9==0 & CDR_10==0 & CDR_11==0 ~ yrs_since_mri_11, # if all 11 visits have a CDR0, then the lag time will be between base date and 11th CDR date
CDR_1==0 & CDR_2==0 & CDR_3==0 & CDR_4==0 & CDR_5==0 & CDR_6==0 & CDR_7==0 & CDR_8==0 & CDR_9==0 & CDR_10==0 & CDR_11=="NA" ~ yrs_since_mri_10, # if there are only 10 visits and all CDR0, then lag time will be between base date and 10th CDR date
CDR_1==0 & CDR_2==0 & CDR_3==0 & CDR_4==0 & CDR_5==0 & CDR_6==0 & CDR_7==0 & CDR_8==0 & CDR_9==0 & CDR_10=="NA" & CDR_11=="NA" ~ yrs_since_mri_9, # "" etc
CDR_1==0 & CDR_2==0 & CDR_3==0 & CDR_4==0 & CDR_5==0 & CDR_6==0 & CDR_7==0 & CDR_8==0 & CDR_9=="NA" & CDR_10=="NA" & CDR_11=="NA" ~ yrs_since_mri_8,
CDR_1==0 & CDR_2==0 & CDR_3==0 & CDR_4==0 & CDR_5==0 & CDR_6==0 & CDR_7==0 & CDR_8=="NA" & CDR_9=="NA" & CDR_10=="NA" & CDR_11=="NA" ~ yrs_since_mri_7,
CDR_1==0 & CDR_2==0 & CDR_3==0 & CDR_4==0 & CDR_5==0 & CDR_6==0 & CDR_7=="NA" & CDR_8=="NA" & CDR_9=="NA" & CDR_10=="NA" & CDR_11=="NA" ~ yrs_since_mri_6,
CDR_1==0 & CDR_2==0 & CDR_3==0 & CDR_4==0 & CDR_5==0 & CDR_6=="NA" & CDR_7=="NA" & CDR_8=="NA" & CDR_9=="NA" & CDR_10=="NA" & CDR_11=="NA" ~ yrs_since_mri_5,
CDR_1==0 & CDR_2==0 & CDR_3==0 & CDR_4==0 & CDR_5=="NA" & CDR_6=="NA" & CDR_7=="NA" & CDR_8=="NA" & CDR_9=="NA" & CDR_10=="NA" & CDR_11=="NA" ~ yrs_since_mri_4,
CDR_1==0 & CDR_2==0 & CDR_3==0 & CDR_4=="NA" & CDR_5=="NA" & CDR_6=="NA" & CDR_7=="NA" & CDR_8=="NA" & CDR_9=="NA" & CDR_10=="NA" & CDR_11=="NA" ~ yrs_since_mri_3,
CDR_1==0 & CDR_2==0 & CDR_3=="NA" & CDR_4=="NA" & CDR_5=="NA" & CDR_6=="NA" & CDR_7=="NA" & CDR_8=="NA" & CDR_9=="NA" & CDR_10=="NA" & CDR_11=="NA" ~ yrs_since_mri_2,
CDR_1==0 & CDR_2=="NA" & CDR_3=="NA" & CDR_4=="NA" & CDR_5=="NA" & CDR_6=="NA" & CDR_7=="NA" & CDR_8=="NA" & CDR_9=="NA" & CDR_10=="NA" & CDR_11=="NA" ~ yrs_since_mri_1,
CDR_1==0 & CDR_2==0 & CDR_3==0 & CDR_4==0 & CDR_5==0 & CDR_6==0 & CDR_7==0 & CDR_8==0 & CDR_9==0 & CDR_10==0 & CDR_11==1~ yrs_since_mri_11, # if all CDR visits are 0 except at visit 11, then lag time will be between base date and 11th CDR date
CDR_1==0 & CDR_2==0 & CDR_3==0 & CDR_4==0 & CDR_5==0 & CDR_6==0 & CDR_7==0 & CDR_8==0 & CDR_9==0 & CDR_10==1 ~ yrs_since_mri_10, # if all CDR visits are 0 prior to visit 10, then lag time will be between base date and 10th CDR date
CDR_1==0 & CDR_2==0 & CDR_3==0 & CDR_4==0 & CDR_5==0 & CDR_6==0 & CDR_7==0 & CDR_8==0 & CDR_9==1 ~ yrs_since_mri_9, # "" etc
CDR_1==0 & CDR_2==0 & CDR_3==0 & CDR_4==0 & CDR_5==0 & CDR_6==0 & CDR_7==0 & CDR_8==1 ~ yrs_since_mri_8,
CDR_1==0 & CDR_2==0 & CDR_3==0 & CDR_4==0 & CDR_5==0 & CDR_6==0 & CDR_7==1 ~ yrs_since_mri_7,
CDR_1==0 & CDR_2==0 & CDR_3==0 & CDR_4==0 & CDR_5==0 & CDR_6==1 ~ yrs_since_mri_6,
CDR_1==0 & CDR_2==0 & CDR_3==0 & CDR_4==0 & CDR_5==1 ~ yrs_since_mri_5,
CDR_1==0 & CDR_2==0 & CDR_3==0 & CDR_4==1 ~ yrs_since_mri_4,
CDR_1==0 & CDR_2==0 & CDR_3==1 ~ yrs_since_mri_3,
CDR_1==0 & CDR_2==1 ~ yrs_since_mri_2))
data <- data%>%
rename(ID=RID)%>%
dplyr::select(-c(15:47))
# Cortical thickness
data <- data%>%
mutate(ATN_CortThick = case_when(
AmyPositivity=="A-" & Cog_Convert=="0" ~ thick))
NeuroPercentile_all<-quantile(data$ATN_CortThick, probs=seq(0,1,0.2), na.rm=TRUE)
NeuroPercentile_all
NeuroPercentile<-quantile(data$ATN_CortThick, probs=0.2, na.rm=TRUE)
NeuroPercentile
data <- data%>%
mutate(NeuroPositivity = case_when(
thick <= NeuroPercentile ~ "N+",
thick > NeuroPercentile ~ "N-"))
# Biomarker_group variable format: 1: A+N+, 2: A+N-, 3:A-N+, 4: A-N-
data <- data%>%
mutate(biomarker_group = case_when(
AmyPositivity=="A+" & NeuroPositivity=="N+" ~ "1",
AmyPositivity=="A+" & NeuroPositivity=="N-" ~ "2",
AmyPositivity=="A-" & NeuroPositivity=="N+" ~ "3",
AmyPositivity=="A-" & NeuroPositivity=="N-" ~ "4"))%>%
dplyr::select(-c(Study,tothipp,ICV,AmyPositivity,ATN_CortThick,NeuroPositivity))
table(data$Cog_Convert)
data1<-data%>%
filter(followuptime < 6.5)
table(data1$Cog_Convert)
data1<-data%>%
filter(followuptime < 6)
table(data1$Cog_Convert)
data1<-data%>%
filter(followuptime < 5)
table(data1$Cog_Convert)
data1<-data%>%
filter(followuptime < 6)
table(data1$Cog_Convert)
